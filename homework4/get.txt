{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lARFPO-eHZhW"
      },
      "source": [
        "# Deep Learning Course\n",
        "\n",
        "## Assignment Four\n",
        "\n",
        "\n",
        "### Assignment Goals:\n",
        "\n",
        "* Implementing Fully Connected AutoEncoders\n",
        "\n",
        "* Implement naive generative model\n",
        "\n",
        "* Understand VAE and GAN, then implement a classical generative model: VAE-GAN.\n",
        "\n",
        "Please be aware that this assignment must be completed using PyTorch.\n",
        "\n",
        "\n",
        "\n",
        "### DataSet\n",
        "\n",
        "In this Assignment, you will use the Fashion-MNIST dataset. The dataset is not given in the assignment package, please download/load by yourself. *Hint*: You can use  \n",
        "```python\n",
        "(x_train, _), (x_test, _)  = keras.datasets.fashion_mnist.load_data()\n",
        "```\n",
        "to load the dataset.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GXBaj8PaHZhY"
      },
      "source": [
        "### Requirements\n",
        "\n",
        "\n",
        "1. **(20 points) Implement a Fully Connected AutoEncoder**\n",
        "\n",
        "    * Your AutoEncoder should have a bottleneck with two neurons and use Mean Squared Error (MSE) as the objective function. Design the model structure by yourself. Notice that in an AutoEncoder, the layer with the least number of neurons is referred to as a bottleneck.\n",
        "\n",
        "    * Train your model on Fashion-MNIST. Plot the train and test loss.\n",
        "\n",
        "    * Randomly select 10 images from the test set, encode the selected 10 images, visualize the original images and the decoded images.\n",
        "\n",
        "\n",
        "2. **(30 points) Naive generative model**\n",
        "\n",
        "    This question is about using an AutoEncoder to generate similar but not identical Fashion-MNIST items. We use a naive approach: Try to see if a trained decoder can map randomly generated inputs (random numbers) to a recognizable Fashion-MNIST item.\n",
        "    \n",
        "    1. Start with your Fully Connected AutoEncoder from part 1. Try to generate new images by inputting some random numbers to the decoder (i.e. the bottleneck layer). Visualize 10 generated images. (10 points)\n",
        "    \n",
        "    2. Now restrict each neuron of the bottleneck layer to have a distribution with mean zeroes and variance one. Retrain the Fully Connected AutoEncoder with the normalized bottleneck. Now randomly generate inputs to the bottleneck layer that are drawn from the multi-variate standard normal distribution, and use the randomly generated inputs to generate new images. Visualize 10 generated images. (15 points)\n",
        "    \n",
        "    3. Are the output images different between A) and B)? If so, why do you think this difference occurs? (5 points)\n",
        "    Yes, they are much more clear. By constraining the bottleneck layer to follow a specific distribution and then sampling from that distribution to generate new images, we can create a controlled environment where the autoencoder can more effectively learn to generate clear and coherent images.  A normalized latent space tends to be both continuous and complete, meaning that any point sampled from this space can be decoded into a coherent image, and slight movements in the latent space result in slight and predictable changes in the output. This property is beneficial for generating images that are variations of the training data but still maintain visual coherence.\n",
        "\n",
        "\n",
        "\n",
        "3. **(50 points + 5 points BONUS(optional)) Advanced generative model**\n",
        "\n",
        "    In this part, you are asking to implement a VAE-GAN model. A VAE-GAN is a Generative Adversarial Network whose generator is an Variational Autoencoder.Here is the paper which proposed the VAE-GAN: [**[PAPER]**](https://arxiv.org/pdf/1512.09300.pdf ). You may need to read this paper before implementing this model.\n",
        "\n",
        "    1. Implement a Variational Autoencoder based on your Fully Connected AutoEncoder from part 1. Use your VAE to randomly generate 10 images. Does the VAE produce a different quality of output image? (30 points)\n",
        "    Yes, it is more clear than before.\n",
        "\n",
        "    2. Implement a VAE-GAN based on your implemented VAE. Train the VAE-GAN. (20 points)\n",
        "      * Then use your VAE-GAN to randomly generate 10 images from $p(z)$.\n",
        "      * Randomly select 10 images from the test dataset and reconstruct them using your model, then visualize the original and reconstructed images.\n",
        "      * **Loss-function of your VAE-GAN model:**\n",
        "          * The basic assignment will choose the $L_{prior}$ and $L_{Gan}$ loss described in the paper (Eq. 5). So your loss function will be\n",
        "          \n",
        "          $L = L_{prior} + L_{gan}$\n",
        "          \n",
        "          _instead of_ $L = L_{prior} + L^{Dis_l} + L_{gan}$ (Eq. 8).\n",
        "          \n",
        "      * **BONUS(5 points)**: For those of you who want to try incorporating the $L^{dis_l}$ term, this would be a bonus question. The basic idea here is to use a discriminator and use one of the hidden layers in the discriminator as a representation of the input. They apply this with a CNN but you can use a hidden discriminator layer with different discriminator architectures. You would be free to use your own creativity in how to select a discriminator layer.\n",
        "      \n",
        "      * *Hint:* (1) For the generation and reconstruction tasks, refer to Section 4.1 in the paper.(2) the authors have posted their code in Github. You should write your own code completely from scratch, but you can look at their code as a resource for clarification.*\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C2RLSP6xHZhZ"
      },
      "source": [
        "### Submission Notes:\n",
        "\n",
        "Please use Jupyter Notebook. The notebook should include the final code, results, and answers. You should submit your Notebook in .pdf and .ipynb format. (penalty 10 points).\n",
        "\n",
        "Notice that your AutoEncoders should have only one bottleneck.\n",
        "\n",
        "This assignment must be completed using PyTorch\n",
        "\n",
        "**Instructions**:\n",
        "\n",
        "The university policy on academic dishonesty and plagiarism (cheating) will be taken very seriously in this course. Everything submitted should be your writing or coding. You must not let other students copy your work. Spelling and grammar count.\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dO7LsVcUHZhZ"
      },
      "source": [
        "## Your implementation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "QosM5lkxHZhZ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import random\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import datasets, transforms\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "zWIFG4ilHZha",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "77e9f3fd-a504-424a-9c25-23ffa90d73eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw/train-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 26421880/26421880 [00:00<00:00, 106695996.28it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting /root/.pytorch/F_MNIST_data/FashionMNIST/raw/train-images-idx3-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw\n",
            "\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw/train-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 29515/29515 [00:00<00:00, 28769435.87it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting /root/.pytorch/F_MNIST_data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw\n",
            "\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n",
            "100%|██████████| 4422102/4422102 [00:00<00:00, 59358336.69it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting /root/.pytorch/F_MNIST_data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw\n",
            "\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n",
            "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5148/5148 [00:00<00:00, 18759580.36it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting /root/.pytorch/F_MNIST_data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to /root/.pytorch/F_MNIST_data/FashionMNIST/raw\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor()\n",
        "])\n",
        "\n",
        "# Download and load the training data\n",
        "trainset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=True, transform=transform)\n",
        "\n",
        "\n",
        "# Download and load the test data\n",
        "testset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=False, transform=transform)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "J6gcNkrxmFM8"
      },
      "outputs": [],
      "source": [
        "\n",
        "trainloader = DataLoader(trainset, batch_size=64, shuffle=True)\n",
        "testloader = DataLoader(testset, batch_size=64, shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "3JPgDJcLMalg"
      },
      "outputs": [],
      "source": [
        "\n",
        "class AutoEncoder(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(AutoEncoder, self).__init__()\n",
        "        # Encoder\n",
        "        self.encoder = nn.Sequential(\n",
        "            nn.Linear(28*28, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 64),\n",
        "            nn.ReLU(),\n",
        "            # nn.Linear(64, 32),\n",
        "            # nn.ReLU(),\n",
        "            nn.Linear(64, 12),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(12, 2)\n",
        "        )\n",
        "\n",
        "        # Decoder\n",
        "        self.decoder = nn.Sequential(\n",
        "            nn.Linear(2, 12),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(12, 64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 28*28),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x_shape=x.shape\n",
        "        x=torch.flatten(x, start_dim=1)\n",
        "        encoded = self.encoder(x)\n",
        "        decoded = self.decoder(encoded)\n",
        "        decoded = decoded.reshape(x_shape)\n",
        "        return decoded\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "GllT57ynMai1",
        "outputId": "e1e382a6-8946-4ef7-b5b9-2f12c4e206b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50, Train Loss: 0.0452, Test Loss: 0.0348\n",
            "Epoch 2/50, Train Loss: 0.0336, Test Loss: 0.0328\n",
            "Epoch 3/50, Train Loss: 0.0321, Test Loss: 0.0319\n",
            "Epoch 4/50, Train Loss: 0.0312, Test Loss: 0.0306\n",
            "Epoch 5/50, Train Loss: 0.0303, Test Loss: 0.0298\n",
            "Epoch 6/50, Train Loss: 0.0295, Test Loss: 0.0302\n",
            "Epoch 7/50, Train Loss: 0.0289, Test Loss: 0.0287\n",
            "Epoch 8/50, Train Loss: 0.0285, Test Loss: 0.0283\n",
            "Epoch 9/50, Train Loss: 0.0281, Test Loss: 0.0280\n",
            "Epoch 10/50, Train Loss: 0.0278, Test Loss: 0.0278\n",
            "Epoch 11/50, Train Loss: 0.0275, Test Loss: 0.0274\n",
            "Epoch 12/50, Train Loss: 0.0273, Test Loss: 0.0274\n",
            "Epoch 13/50, Train Loss: 0.0271, Test Loss: 0.0273\n",
            "Epoch 14/50, Train Loss: 0.0269, Test Loss: 0.0277\n",
            "Epoch 15/50, Train Loss: 0.0268, Test Loss: 0.0266\n",
            "Epoch 16/50, Train Loss: 0.0267, Test Loss: 0.0269\n",
            "Epoch 17/50, Train Loss: 0.0266, Test Loss: 0.0271\n",
            "Epoch 18/50, Train Loss: 0.0264, Test Loss: 0.0265\n",
            "Epoch 19/50, Train Loss: 0.0262, Test Loss: 0.0273\n",
            "Epoch 20/50, Train Loss: 0.0261, Test Loss: 0.0261\n",
            "Epoch 21/50, Train Loss: 0.0260, Test Loss: 0.0261\n",
            "Epoch 22/50, Train Loss: 0.0259, Test Loss: 0.0261\n",
            "Epoch 23/50, Train Loss: 0.0258, Test Loss: 0.0260\n",
            "Epoch 24/50, Train Loss: 0.0257, Test Loss: 0.0258\n",
            "Epoch 25/50, Train Loss: 0.0257, Test Loss: 0.0260\n",
            "Epoch 26/50, Train Loss: 0.0256, Test Loss: 0.0259\n",
            "Epoch 27/50, Train Loss: 0.0256, Test Loss: 0.0259\n",
            "Epoch 28/50, Train Loss: 0.0255, Test Loss: 0.0267\n",
            "Epoch 29/50, Train Loss: 0.0255, Test Loss: 0.0261\n",
            "Epoch 30/50, Train Loss: 0.0253, Test Loss: 0.0257\n",
            "Epoch 31/50, Train Loss: 0.0253, Test Loss: 0.0255\n",
            "Epoch 32/50, Train Loss: 0.0253, Test Loss: 0.0255\n",
            "Epoch 33/50, Train Loss: 0.0252, Test Loss: 0.0254\n",
            "Epoch 34/50, Train Loss: 0.0252, Test Loss: 0.0255\n",
            "Epoch 35/50, Train Loss: 0.0253, Test Loss: 0.0252\n",
            "Epoch 36/50, Train Loss: 0.0251, Test Loss: 0.0253\n",
            "Epoch 37/50, Train Loss: 0.0250, Test Loss: 0.0251\n",
            "Epoch 38/50, Train Loss: 0.0249, Test Loss: 0.0251\n",
            "Epoch 39/50, Train Loss: 0.0250, Test Loss: 0.0250\n",
            "Epoch 40/50, Train Loss: 0.0248, Test Loss: 0.0253\n",
            "Epoch 41/50, Train Loss: 0.0249, Test Loss: 0.0254\n",
            "Epoch 42/50, Train Loss: 0.0249, Test Loss: 0.0249\n",
            "Epoch 43/50, Train Loss: 0.0248, Test Loss: 0.0248\n",
            "Epoch 44/50, Train Loss: 0.0247, Test Loss: 0.0248\n",
            "Epoch 45/50, Train Loss: 0.0247, Test Loss: 0.0249\n",
            "Epoch 46/50, Train Loss: 0.0246, Test Loss: 0.0254\n",
            "Epoch 47/50, Train Loss: 0.0247, Test Loss: 0.0248\n",
            "Epoch 48/50, Train Loss: 0.0246, Test Loss: 0.0251\n",
            "Epoch 49/50, Train Loss: 0.0246, Test Loss: 0.0249\n",
            "Epoch 50/50, Train Loss: 0.0245, Test Loss: 0.0250\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Initialize the model, loss function, and optimizer\n",
        "model = AutoEncoder().to(device)\n",
        "criterion = nn.MSELoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n",
        "\n",
        "# Training function\n",
        "def train_model(model, criterion, optimizer, num_epochs=5):\n",
        "    train_loss, test_loss = [], []\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        running_loss = 0.0\n",
        "        for data in trainloader:\n",
        "            inputs, _ = data\n",
        "            inputs = inputs.to(device)\n",
        "            outputs = model(inputs)\n",
        "            loss = criterion(outputs, inputs)\n",
        "            optimizer.zero_grad()\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            running_loss += loss.item()\n",
        "        epoch_loss = running_loss / len(trainloader)\n",
        "        train_loss.append(epoch_loss)\n",
        "\n",
        "        # Validation loss\n",
        "        model.eval()\n",
        "        running_loss = 0.0\n",
        "        with torch.no_grad():\n",
        "            for data in testloader:\n",
        "                inputs, _ = data\n",
        "                inputs = inputs.to(device)\n",
        "                outputs = model(inputs)\n",
        "                loss = criterion(outputs, inputs)\n",
        "                running_loss += loss.item()\n",
        "        epoch_loss = running_loss / len(testloader)\n",
        "        test_loss.append(epoch_loss)\n",
        "\n",
        "        print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss[-1]:.4f}, Test Loss: {test_loss[-1]:.4f}')\n",
        "\n",
        "    return train_loss, test_loss\n",
        "\n",
        "# Train the model\n",
        "train_loss, test_loss = train_model(model, criterion, optimizer, num_epochs=50)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(train_loss, label='Train Loss')\n",
        "plt.plot(test_loss, label='Test Loss')\n",
        "plt.title('Train and Test Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "hOYH6lqLMagM",
        "outputId": "9a93c250-4418-44b3-eee4-6581e7126179"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x400 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "def visualize_reconstructions(model, dataloader, num_images=10):\n",
        "    device = next(model.parameters()).device\n",
        "    model.eval()\n",
        "    indices = random.sample(range(len(dataloader.dataset)), num_images)\n",
        "    images = torch.stack([dataloader.dataset[i][0] for i in indices]).to(device)\n",
        "\n",
        "    with torch.no_grad():\n",
        "        reconstructions= model(images)\n",
        "    images = images.cpu().view(-1, 28, 28).numpy()\n",
        "    reconstructions = reconstructions.cpu().view(-1, 28, 28).numpy()\n",
        "\n",
        "    fig, axs = plt.subplots(2, num_images, figsize=(20, 4))\n",
        "    for i in range(num_images):\n",
        "        axs[0, i].imshow(images[i], cmap='gray')\n",
        "        axs[0, i].axis('off')\n",
        "        axs[1, i].imshow(reconstructions[i], cmap='gray')\n",
        "        axs[1, i].axis('off')\n",
        "    plt.show()\n",
        "visualize_reconstructions(model, testloader, num_images=10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nZuZZh9kpP1P"
      },
      "source": [
        "Part 2 Naive generative model\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "id": "mkjaqKlOMadq",
        "outputId": "b92bdf21-7a6f-4372-b05b-30df78f844f8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x400 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "model.eval()\n",
        "normalized_random_inputs = ((torch.randn(10, 2))).to(device)\n",
        "with torch.no_grad():\n",
        "    normalized_generated_images = model.decoder((normalized_random_inputs)).cpu().view(-1, 28, 28).numpy()\n",
        "\n",
        "plt.figure(figsize=(20, 4))\n",
        "for i in range(10):\n",
        "    plt.subplot(1, 10, i+1)\n",
        "    plt.imshow(normalized_generated_images[i], cmap='gray')\n",
        "    plt.axis('off')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "3RmgKEPCMaIM"
      },
      "outputs": [],
      "source": [
        "class AutoEncoder2(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(AutoEncoder2, self).__init__()\n",
        "        # Encoder\n",
        "        self.encoder = nn.Sequential(\n",
        "            nn.Linear(28*28, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 64),\n",
        "            nn.ReLU(),\n",
        "            # nn.Linear(64, 32),\n",
        "            # nn.ReLU(),\n",
        "            nn.Linear(64, 12),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(12, 2)\n",
        "        )\n",
        "\n",
        "        self.bottle_neck = nn.Sequential(\n",
        "\n",
        "            nn.BatchNorm1d(2),\n",
        "            # nn.ReLU()\n",
        "        )\n",
        "        # Decoder\n",
        "        self.decoder = nn.Sequential(\n",
        "            nn.Linear(2, 12),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(12, 64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 28*28),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x_shape=x.shape\n",
        "        x=torch.flatten(x, start_dim=1)\n",
        "        encoded = self.encoder(x)\n",
        "        bot   = self.bottle_neck(encoded)\n",
        "        decoded = self.decoder(bot)\n",
        "        decoded = decoded.reshape(x_shape)\n",
        "        return decoded"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ayhPwnTL5N_k",
        "outputId": "fa819fc7-ac4f-4e9e-836f-7f163c70d01e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50, Train Loss: 0.0459, Test Loss: 0.0359\n",
            "Epoch 2/50, Train Loss: 0.0367, Test Loss: 0.0339\n",
            "Epoch 3/50, Train Loss: 0.0352, Test Loss: 0.0333\n",
            "Epoch 4/50, Train Loss: 0.0343, Test Loss: 0.0321\n",
            "Epoch 5/50, Train Loss: 0.0335, Test Loss: 0.0306\n",
            "Epoch 6/50, Train Loss: 0.0327, Test Loss: 0.0299\n",
            "Epoch 7/50, Train Loss: 0.0324, Test Loss: 0.0295\n",
            "Epoch 8/50, Train Loss: 0.0320, Test Loss: 0.0290\n",
            "Epoch 9/50, Train Loss: 0.0319, Test Loss: 0.0286\n",
            "Epoch 10/50, Train Loss: 0.0318, Test Loss: 0.0288\n",
            "Epoch 11/50, Train Loss: 0.0314, Test Loss: 0.0284\n",
            "Epoch 12/50, Train Loss: 0.0312, Test Loss: 0.0287\n",
            "Epoch 13/50, Train Loss: 0.0312, Test Loss: 0.0280\n",
            "Epoch 14/50, Train Loss: 0.0314, Test Loss: 0.0287\n",
            "Epoch 15/50, Train Loss: 0.0311, Test Loss: 0.0280\n",
            "Epoch 16/50, Train Loss: 0.0311, Test Loss: 0.0279\n",
            "Epoch 17/50, Train Loss: 0.0310, Test Loss: 0.0279\n",
            "Epoch 18/50, Train Loss: 0.0310, Test Loss: 0.0278\n",
            "Epoch 19/50, Train Loss: 0.0309, Test Loss: 0.0277\n",
            "Epoch 20/50, Train Loss: 0.0311, Test Loss: 0.0281\n",
            "Epoch 21/50, Train Loss: 0.0309, Test Loss: 0.0278\n",
            "Epoch 22/50, Train Loss: 0.0307, Test Loss: 0.0275\n",
            "Epoch 23/50, Train Loss: 0.0308, Test Loss: 0.0281\n",
            "Epoch 24/50, Train Loss: 0.0307, Test Loss: 0.0275\n",
            "Epoch 25/50, Train Loss: 0.0308, Test Loss: 0.0274\n",
            "Epoch 26/50, Train Loss: 0.0309, Test Loss: 0.0277\n",
            "Epoch 27/50, Train Loss: 0.0308, Test Loss: 0.0278\n",
            "Epoch 28/50, Train Loss: 0.0308, Test Loss: 0.0276\n",
            "Epoch 29/50, Train Loss: 0.0310, Test Loss: 0.0272\n",
            "Epoch 30/50, Train Loss: 0.0307, Test Loss: 0.0276\n",
            "Epoch 31/50, Train Loss: 0.0307, Test Loss: 0.0272\n",
            "Epoch 32/50, Train Loss: 0.0307, Test Loss: 0.0273\n",
            "Epoch 33/50, Train Loss: 0.0306, Test Loss: 0.0274\n",
            "Epoch 34/50, Train Loss: 0.0307, Test Loss: 0.0273\n",
            "Epoch 35/50, Train Loss: 0.0307, Test Loss: 0.0278\n",
            "Epoch 36/50, Train Loss: 0.0307, Test Loss: 0.0272\n",
            "Epoch 37/50, Train Loss: 0.0305, Test Loss: 0.0272\n",
            "Epoch 38/50, Train Loss: 0.0306, Test Loss: 0.0272\n",
            "Epoch 39/50, Train Loss: 0.0305, Test Loss: 0.0273\n",
            "Epoch 40/50, Train Loss: 0.0303, Test Loss: 0.0277\n",
            "Epoch 41/50, Train Loss: 0.0306, Test Loss: 0.0270\n",
            "Epoch 42/50, Train Loss: 0.0305, Test Loss: 0.0272\n",
            "Epoch 43/50, Train Loss: 0.0304, Test Loss: 0.0269\n",
            "Epoch 44/50, Train Loss: 0.0305, Test Loss: 0.0270\n",
            "Epoch 45/50, Train Loss: 0.0303, Test Loss: 0.0269\n",
            "Epoch 46/50, Train Loss: 0.0305, Test Loss: 0.0272\n",
            "Epoch 47/50, Train Loss: 0.0303, Test Loss: 0.0273\n",
            "Epoch 48/50, Train Loss: 0.0303, Test Loss: 0.0268\n",
            "Epoch 49/50, Train Loss: 0.0304, Test Loss: 0.0275\n",
            "Epoch 50/50, Train Loss: 0.0303, Test Loss: 0.0267\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "model1 = AutoEncoder2().to(device)\n",
        "criterion = nn.MSELoss()\n",
        "optimizer = torch.optim.Adam(model1.parameters(), lr=1e-3)\n",
        "\n",
        "# Training function\n",
        "def train_model1(model1, criterion, optimizer, num_epochs):\n",
        "    train_loss, test_loss = [], []\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        model1.train()\n",
        "        running_loss = 0.0\n",
        "        for data in trainloader:\n",
        "            inputs, _ = data\n",
        "            inputs = inputs.to(device)\n",
        "            outputs = model1(inputs)\n",
        "            loss = criterion(outputs, inputs)\n",
        "            optimizer.zero_grad()\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            running_loss += loss.item()\n",
        "        epoch_loss = running_loss / len(trainloader)\n",
        "        train_loss.append(epoch_loss)\n",
        "\n",
        "        # Validation loss\n",
        "        model1.eval()\n",
        "        running_loss = 0.0\n",
        "        with torch.no_grad():\n",
        "            for data in testloader:\n",
        "                inputs, _ = data\n",
        "                inputs = inputs.to(device)\n",
        "                outputs = model1(inputs)\n",
        "                loss = criterion(outputs, inputs)\n",
        "                running_loss += loss.item()\n",
        "        epoch_loss = running_loss / len(testloader)\n",
        "        test_loss.append(epoch_loss)\n",
        "\n",
        "        print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss[-1]:.4f}, Test Loss: {test_loss[-1]:.4f}')\n",
        "\n",
        "    return train_loss, test_loss\n",
        "train_loss, test_loss = train_model1(model1, criterion, optimizer, num_epochs=50)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(train_loss, label='Train Loss')\n",
        "plt.plot(test_loss, label='Test Loss')\n",
        "plt.title('Train and Test Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "id": "MkrEg0OSDdnq",
        "outputId": "289295e3-612c-4b9a-b35d-489621fa5c55"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x400 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "mean = np.array([0, 0])\n",
        "covariance_matrix = np.eye(2)\n",
        "num_samples = 10\n",
        "normalized_random_inputs = torch.Tensor(np.random.multivariate_normal(mean, covariance_matrix, num_samples))\n",
        "normalized_random_inputs = normalized_random_inputs.to(device)\n",
        "\n",
        "model.eval()\n",
        "with torch.no_grad():\n",
        "    normalized_generated_images = model1.decoder(normalized_random_inputs).cpu().view(-1, 28, 28).numpy()\n",
        "\n",
        "plt.figure(figsize=(20, 4))\n",
        "for i in range(10):\n",
        "    plt.subplot(1, 10, i+1)\n",
        "    plt.imshow(normalized_generated_images[i], cmap='gray')\n",
        "    plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Part 3"
      ],
      "metadata": {
        "id": "GznprYgj3UOv"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "X_CTLta2c7Od"
      },
      "outputs": [],
      "source": [
        "class VAE(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(VAE, self).__init__()\n",
        "        # Encoder\n",
        "        self.encoder = nn.Sequential(\n",
        "            nn.Linear(28*28, 512),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(512, 256),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(256, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64, 32),\n",
        "            nn.ReLU()\n",
        "\n",
        "        )\n",
        "\n",
        "        self.mu = nn.Linear(32, 2)\n",
        "        self.logvar = nn.Linear(32, 2)\n",
        "        # Decoder\n",
        "        self.decoder = nn.Sequential(\n",
        "            nn.Linear(2, 32),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(32, 64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 256),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(256, 512),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(512, 28*28),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "    def reparameterize(self, mu, logvar):\n",
        "        std = torch.exp(0.5*logvar)\n",
        "        eps = torch.randn_like(std)\n",
        "        return mu + (eps * std)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x_shape=x.shape\n",
        "        x=torch.flatten(x, start_dim=1)\n",
        "        encoded = self.encoder(x)\n",
        "        mu = self.mu(encoded)\n",
        "        logvar = self.logvar(encoded)\n",
        "        z = self.reparameterize(mu, logvar)\n",
        "        decoded = self.decoder(z)\n",
        "        decoded = torch.reshape(decoded, x_shape)\n",
        "        return decoded, mu, logvar"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "uO718xB5Uryt"
      },
      "outputs": [],
      "source": [
        "VAEmodel = VAE().to(device)\n",
        "criterion = nn.MSELoss()\n",
        "optimizer = torch.optim.Adam(VAEmodel.parameters(), lr=1e-4)\n",
        "batch_size=64"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "MOwvcK-6c7MB"
      },
      "outputs": [],
      "source": [
        "def loss_function(recon_x, x, mu, logvar):\n",
        "    MSE = criterion(recon_x, x)\n",
        "    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n",
        "    # print (MSE, KLD)\n",
        "    KLD/=batch_size*784\n",
        "    result= MSE + KLD\n",
        "\n",
        "    return result"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "MGxbZu6yc7JY",
        "outputId": "83626354-62c3-4285-862f-7a7b6389241a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50, Train Loss: 0.0810, Test Loss: 0.0628\n",
            "Epoch 2/50, Train Loss: 0.0586, Test Loss: 0.0545\n",
            "Epoch 3/50, Train Loss: 0.0493, Test Loss: 0.0459\n",
            "Epoch 4/50, Train Loss: 0.0450, Test Loss: 0.0441\n",
            "Epoch 5/50, Train Loss: 0.0433, Test Loss: 0.0425\n",
            "Epoch 6/50, Train Loss: 0.0422, Test Loss: 0.0414\n",
            "Epoch 7/50, Train Loss: 0.0411, Test Loss: 0.0405\n",
            "Epoch 8/50, Train Loss: 0.0400, Test Loss: 0.0401\n",
            "Epoch 9/50, Train Loss: 0.0393, Test Loss: 0.0388\n",
            "Epoch 10/50, Train Loss: 0.0387, Test Loss: 0.0384\n",
            "Epoch 11/50, Train Loss: 0.0382, Test Loss: 0.0377\n",
            "Epoch 12/50, Train Loss: 0.0384, Test Loss: 0.0385\n",
            "Epoch 13/50, Train Loss: 0.0379, Test Loss: 0.0378\n",
            "Epoch 14/50, Train Loss: 0.0374, Test Loss: 0.0372\n",
            "Epoch 15/50, Train Loss: 0.0370, Test Loss: 0.0367\n",
            "Epoch 16/50, Train Loss: 0.0367, Test Loss: 0.0366\n",
            "Epoch 17/50, Train Loss: 0.0364, Test Loss: 0.0363\n",
            "Epoch 18/50, Train Loss: 0.0361, Test Loss: 0.0365\n",
            "Epoch 19/50, Train Loss: 0.0360, Test Loss: 0.0360\n",
            "Epoch 20/50, Train Loss: 0.0358, Test Loss: 0.0358\n",
            "Epoch 21/50, Train Loss: 0.0357, Test Loss: 0.0354\n",
            "Epoch 22/50, Train Loss: 0.0355, Test Loss: 0.0356\n",
            "Epoch 23/50, Train Loss: 0.0354, Test Loss: 0.0358\n",
            "Epoch 24/50, Train Loss: 0.0352, Test Loss: 0.0353\n",
            "Epoch 25/50, Train Loss: 0.0351, Test Loss: 0.0353\n",
            "Epoch 26/50, Train Loss: 0.0350, Test Loss: 0.0350\n",
            "Epoch 27/50, Train Loss: 0.0349, Test Loss: 0.0350\n",
            "Epoch 28/50, Train Loss: 0.0348, Test Loss: 0.0348\n",
            "Epoch 29/50, Train Loss: 0.0348, Test Loss: 0.0348\n",
            "Epoch 30/50, Train Loss: 0.0347, Test Loss: 0.0348\n",
            "Epoch 31/50, Train Loss: 0.0345, Test Loss: 0.0346\n",
            "Epoch 32/50, Train Loss: 0.0345, Test Loss: 0.0348\n",
            "Epoch 33/50, Train Loss: 0.0344, Test Loss: 0.0348\n",
            "Epoch 34/50, Train Loss: 0.0344, Test Loss: 0.0344\n",
            "Epoch 35/50, Train Loss: 0.0343, Test Loss: 0.0350\n",
            "Epoch 36/50, Train Loss: 0.0342, Test Loss: 0.0344\n",
            "Epoch 37/50, Train Loss: 0.0342, Test Loss: 0.0342\n",
            "Epoch 38/50, Train Loss: 0.0341, Test Loss: 0.0342\n",
            "Epoch 39/50, Train Loss: 0.0341, Test Loss: 0.0343\n",
            "Epoch 40/50, Train Loss: 0.0340, Test Loss: 0.0342\n",
            "Epoch 41/50, Train Loss: 0.0339, Test Loss: 0.0344\n",
            "Epoch 42/50, Train Loss: 0.0339, Test Loss: 0.0343\n",
            "Epoch 43/50, Train Loss: 0.0339, Test Loss: 0.0345\n",
            "Epoch 44/50, Train Loss: 0.0339, Test Loss: 0.0341\n",
            "Epoch 45/50, Train Loss: 0.0338, Test Loss: 0.0339\n",
            "Epoch 46/50, Train Loss: 0.0337, Test Loss: 0.0340\n",
            "Epoch 47/50, Train Loss: 0.0337, Test Loss: 0.0338\n",
            "Epoch 48/50, Train Loss: 0.0337, Test Loss: 0.0338\n",
            "Epoch 49/50, Train Loss: 0.0336, Test Loss: 0.0338\n",
            "Epoch 50/50, Train Loss: 0.0336, Test Loss: 0.0339\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "def train_VAE(model,  optimizer, num_epochs):\n",
        "    train_loss, test_loss = [], []\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        running_loss = 0.0\n",
        "        for data in trainloader:\n",
        "            inputs, _ = data\n",
        "            inputs = inputs.to(device)\n",
        "            outputs,mu,logvar = model(inputs)\n",
        "            loss = loss_function(outputs, inputs,mu,logvar)\n",
        "            optimizer.zero_grad()\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            running_loss += loss.item()\n",
        "        epoch_loss = running_loss / len(trainloader)\n",
        "        train_loss.append(epoch_loss)\n",
        "\n",
        "        # Validation loss\n",
        "        model.eval()\n",
        "        running_loss = 0.0\n",
        "        with torch.no_grad():\n",
        "            for data in testloader:\n",
        "                inputs, _ = data\n",
        "                inputs = inputs.to(device)\n",
        "                outputs,mu,logvar = model(inputs)\n",
        "                loss = loss_function(outputs, inputs,mu,logvar)\n",
        "                running_loss += loss.item()\n",
        "        epoch_loss = running_loss / len(testloader)\n",
        "        test_loss.append(epoch_loss)\n",
        "\n",
        "        print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss[-1]:.4f}, Test Loss: {test_loss[-1]:.4f}')\n",
        "\n",
        "    return train_loss, test_loss\n",
        "train_loss, test_loss = train_VAE(VAEmodel, optimizer, num_epochs=50)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(train_loss, label='Train Loss')\n",
        "plt.plot(test_loss, label='Test Loss')\n",
        "plt.title('Train and Test Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "wEdU3CEgc6tJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "edeb6fee-13a9-43dc-fcc9-b302517a1f30"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x400 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "normalized_random_inputs = ((torch.randn(10, 2))).to(device)\n",
        "with torch.no_grad():\n",
        "    normalized_generated_images = VAEmodel.decoder((normalized_random_inputs)).cpu().view(-1, 28, 28).numpy()\n",
        "\n",
        "plt.figure(figsize=(20, 4))\n",
        "for i in range(10):\n",
        "    plt.subplot(1, 10, i+1)\n",
        "    plt.imshow(normalized_generated_images[i], cmap='gray')\n",
        "    plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class discriminator(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(discriminator, self).__init__()\n",
        "        self.model = nn.Sequential(\n",
        "            nn.Linear(28*28, 512),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(512, 256),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(256, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 64),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(64, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "    def forward(self, x):\n",
        "        x = self.model(x)\n",
        "        return x"
      ],
      "metadata": {
        "id": "jAY9v5ov1g1G"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class VAE_GAN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(VAE_GAN, self).__init__()\n",
        "        self.VAE= VAE().to(device)\n",
        "        self.discriminator = discriminator().to(device)\n",
        "    def forward(self, x):\n",
        "        x_shape=x.shape\n",
        "        x=torch.flatten(x, start_dim=1)\n",
        "        z, mu, logvar= self.VAE(x)\n",
        "        discriminator_output = self.discriminator(z)\n",
        "        z = torch.reshape(z, x_shape)\n",
        "        return discriminator_output, mu, logvar, z\n",
        "\n"
      ],
      "metadata": {
        "id": "-RBBvKe_1gum"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "VAEGANmodel = VAE_GAN().to(device)\n",
        "criterion = nn.MSELoss()\n",
        "adversarial_loss = nn.BCELoss()\n",
        "VAEGANoptimizer = torch.optim.Adam(VAEGANmodel.VAE.parameters(), lr=1e-4)\n",
        "Discrinimator_optimizer = torch.optim.Adam(VAEGANmodel.discriminator.parameters(), lr=1e-6)\n"
      ],
      "metadata": {
        "id": "Y97ZSbEy1ge-"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train_VAEGAN(model,  vanganoptimizer, discriminator_opt, num_epochs):\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        vae_loss=0\n",
        "        disc_loss=0\n",
        "        for data in trainloader:\n",
        "            inputs, _ = data\n",
        "            inputs = inputs.to(device)\n",
        "            discriminator_output,mu,logvar,outputs = model(inputs)\n",
        "            vaeloss = loss_function(outputs, inputs,mu,logvar)\n",
        "            vanganoptimizer.zero_grad()\n",
        "            vaeloss.backward()\n",
        "            vanganoptimizer.step()\n",
        "            vae_loss += vaeloss.item()\n",
        "\n",
        "            discriminator_opt.zero_grad()\n",
        "            disc_output,_,_,_ = model(inputs)\n",
        "            real_labels = torch.ones(inputs.size(0), 1).to(device)\n",
        "            fake_labels = torch.zeros(inputs.size(0), 1).to(device)\n",
        "            real_loss = adversarial_loss(disc_output, real_labels)\n",
        "            fake_inputs = torch.randn(inputs.size(0), 2).to(device)\n",
        "            fake_images = model.VAE.decoder(fake_inputs)\n",
        "            disc_output,_,_,_ = model(fake_images.detach())\n",
        "            fake_loss = adversarial_loss(disc_output, fake_labels)\n",
        "            discloss = real_loss + fake_loss\n",
        "            discloss.backward()\n",
        "            disc_loss+= real_loss.item() + fake_loss.item()\n",
        "            discriminator_opt.step()\n",
        "        disc_loss = disc_loss / len(trainloader)\n",
        "        vae_loss = vae_loss / len(trainloader)\n",
        "        print(f'Epoch {epoch+1}/{num_epochs}, VAE Loss: {vae_loss:.4f}, Discriminator Loss: {disc_loss:.4f}')\n",
        "\n",
        "    return model\n",
        "\n",
        "model2 = train_VAEGAN(VAEGANmodel, VAEGANoptimizer, Discrinimator_optimizer, num_epochs=50)\n",
        "\n"
      ],
      "metadata": {
        "id": "WXakIp896Wgj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "429a0f2f-d96c-4dea-d417-675e72e63026"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50, VAE Loss: 0.0839, Discriminator Loss: 1.3848\n",
            "Epoch 2/50, VAE Loss: 0.0602, Discriminator Loss: 1.3817\n",
            "Epoch 3/50, VAE Loss: 0.0534, Discriminator Loss: 1.3768\n",
            "Epoch 4/50, VAE Loss: 0.0470, Discriminator Loss: 1.3753\n",
            "Epoch 5/50, VAE Loss: 0.0429, Discriminator Loss: 1.3662\n",
            "Epoch 6/50, VAE Loss: 0.0404, Discriminator Loss: 1.3470\n",
            "Epoch 7/50, VAE Loss: 0.0391, Discriminator Loss: 1.3349\n",
            "Epoch 8/50, VAE Loss: 0.0383, Discriminator Loss: 1.3345\n",
            "Epoch 9/50, VAE Loss: 0.0377, Discriminator Loss: 1.3364\n",
            "Epoch 10/50, VAE Loss: 0.0373, Discriminator Loss: 1.3423\n",
            "Epoch 11/50, VAE Loss: 0.0369, Discriminator Loss: 1.3446\n",
            "Epoch 12/50, VAE Loss: 0.0367, Discriminator Loss: 1.3485\n",
            "Epoch 13/50, VAE Loss: 0.0365, Discriminator Loss: 1.3491\n",
            "Epoch 14/50, VAE Loss: 0.0363, Discriminator Loss: 1.3506\n",
            "Epoch 15/50, VAE Loss: 0.0361, Discriminator Loss: 1.3513\n",
            "Epoch 16/50, VAE Loss: 0.0359, Discriminator Loss: 1.3532\n",
            "Epoch 17/50, VAE Loss: 0.0357, Discriminator Loss: 1.3535\n",
            "Epoch 18/50, VAE Loss: 0.0357, Discriminator Loss: 1.3527\n",
            "Epoch 19/50, VAE Loss: 0.0355, Discriminator Loss: 1.3553\n",
            "Epoch 20/50, VAE Loss: 0.0354, Discriminator Loss: 1.3550\n",
            "Epoch 21/50, VAE Loss: 0.0353, Discriminator Loss: 1.3565\n",
            "Epoch 22/50, VAE Loss: 0.0351, Discriminator Loss: 1.3538\n",
            "Epoch 23/50, VAE Loss: 0.0351, Discriminator Loss: 1.3568\n",
            "Epoch 24/50, VAE Loss: 0.0350, Discriminator Loss: 1.3559\n",
            "Epoch 25/50, VAE Loss: 0.0349, Discriminator Loss: 1.3554\n",
            "Epoch 26/50, VAE Loss: 0.0348, Discriminator Loss: 1.3576\n",
            "Epoch 27/50, VAE Loss: 0.0347, Discriminator Loss: 1.3575\n",
            "Epoch 28/50, VAE Loss: 0.0346, Discriminator Loss: 1.3571\n",
            "Epoch 29/50, VAE Loss: 0.0346, Discriminator Loss: 1.3583\n",
            "Epoch 30/50, VAE Loss: 0.0345, Discriminator Loss: 1.3579\n",
            "Epoch 31/50, VAE Loss: 0.0344, Discriminator Loss: 1.3580\n",
            "Epoch 32/50, VAE Loss: 0.0343, Discriminator Loss: 1.3587\n",
            "Epoch 33/50, VAE Loss: 0.0343, Discriminator Loss: 1.3588\n",
            "Epoch 34/50, VAE Loss: 0.0342, Discriminator Loss: 1.3584\n",
            "Epoch 35/50, VAE Loss: 0.0341, Discriminator Loss: 1.3594\n",
            "Epoch 36/50, VAE Loss: 0.0341, Discriminator Loss: 1.3586\n",
            "Epoch 37/50, VAE Loss: 0.0340, Discriminator Loss: 1.3582\n",
            "Epoch 38/50, VAE Loss: 0.0340, Discriminator Loss: 1.3586\n",
            "Epoch 39/50, VAE Loss: 0.0339, Discriminator Loss: 1.3586\n",
            "Epoch 40/50, VAE Loss: 0.0338, Discriminator Loss: 1.3583\n",
            "Epoch 41/50, VAE Loss: 0.0338, Discriminator Loss: 1.3583\n",
            "Epoch 42/50, VAE Loss: 0.0338, Discriminator Loss: 1.3580\n",
            "Epoch 43/50, VAE Loss: 0.0337, Discriminator Loss: 1.3587\n",
            "Epoch 44/50, VAE Loss: 0.0337, Discriminator Loss: 1.3593\n",
            "Epoch 45/50, VAE Loss: 0.0336, Discriminator Loss: 1.3580\n",
            "Epoch 46/50, VAE Loss: 0.0336, Discriminator Loss: 1.3581\n",
            "Epoch 47/50, VAE Loss: 0.0335, Discriminator Loss: 1.3587\n",
            "Epoch 48/50, VAE Loss: 0.0335, Discriminator Loss: 1.3591\n",
            "Epoch 49/50, VAE Loss: 0.0335, Discriminator Loss: 1.3595\n",
            "Epoch 50/50, VAE Loss: 0.0334, Discriminator Loss: 1.3609\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def visualize_reconstructions_vae_gan(model, dataloader, num_images=10):\n",
        "    device = next(model.parameters()).device\n",
        "    model.eval()\n",
        "    indices = random.sample(range(len(dataloader.dataset)), num_images)\n",
        "    images = torch.stack([dataloader.dataset[i][0] for i in indices]).to(device)\n",
        "\n",
        "    with torch.no_grad():\n",
        "        _, _, _, reconstructions = model(images)\n",
        "    images = images.cpu().view(-1, 28, 28).numpy()\n",
        "    reconstructions = reconstructions.cpu().view(-1, 28, 28).numpy()\n",
        "\n",
        "    fig, axs = plt.subplots(2, num_images, figsize=(20, 4))\n",
        "    for i in range(num_images):\n",
        "        axs[0, i].imshow(images[i], cmap='gray')\n",
        "        axs[0, i].axis('off')\n",
        "        axs[1, i].imshow(reconstructions[i], cmap='gray')\n",
        "        axs[1, i].axis('off')\n",
        "    plt.show()\n",
        "\n",
        "visualize_reconstructions_vae_gan(model2, testloader, num_images=10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "4d_IJkLF3BA2",
        "outputId": "8be81bdb-2d63-4ab3-e1ef-edbada22e591"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x400 with 20 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "normalized_random_inputs = ((torch.randn(10, 2))).to(device)\n",
        "with torch.no_grad():\n",
        "    normalized_generated_images = model2.VAE.decoder((normalized_random_inputs)).cpu().view(-1, 28, 28).numpy()\n",
        "\n",
        "plt.figure(figsize=(20, 4))\n",
        "for i in range(10):\n",
        "    plt.subplot(1, 10, i+1)\n",
        "    plt.imshow(normalized_generated_images[i], cmap='gray')\n",
        "    plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "id": "J2FcKfihbnzY",
        "outputId": "8eb1bf93-48bb-45cb-b800-9fb918ff62a5"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x400 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "V100",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}